Ext.data.JsonP.GeoExt_state_PermalinkProvider({"parentMixins":[],"inheritdoc":null,"extends":"Ext.state.Provider","alternateClassNames":[],"requires":[],"tagname":"class","singleton":false,"inheritable":false,"statics":{"cfg":[],"property":[],"method":[],"event":[],"css_var":[],"css_mixin":[]},"mixins":[],"code_type":"ext_define","component":false,"uses":[],"members":{"cfg":[],"method":[{"owner":"GeoExt.state.PermalinkProvider","tagname":"method","meta":{},"name":"getLink","id":"method-getLink"},{"owner":"GeoExt.state.PermalinkProvider","tagname":"method","meta":{"private":true},"name":"readURL","id":"method-readURL"}],"property":[{"owner":"GeoExt.state.PermalinkProvider","tagname":"property","meta":{"private":true},"name":"encodeType","id":"property-encodeType"}],"css_var":[],"event":[],"css_mixin":[]},"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>Ext.state.Provider<div class='subclass '><strong>GeoExt.state.PermalinkProvider</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/PermalinkProvider.html#GeoExt-state-PermalinkProvider' target='_blank'>PermalinkProvider.js</a></div></pre><div class='doc-contents'><p>The permalink provider.</p>\n\n<p> Sample code displaying a new permalink each time the map is moved.</p>\n\n<pre class='inline-example '><code>// create permalink provider\n var permalinkProvider = new <a href=\"#!/api/GeoExt.state.PermalinkProvider\" rel=\"GeoExt.state.PermalinkProvider\" class=\"docClass\">GeoExt.state.PermalinkProvider</a>();\n\n // set it in the state manager\n Ext.state.Manager.setProvider(permalinkProvider);\n\n // create a map panel, and make it stateful\n var mapPanel = new <a href=\"#!/api/GeoExt.panel.Map\" rel=\"GeoExt.panel.Map\" class=\"docClass\">GeoExt.MapPanel</a>({\n     renderTo: \"map\",\n     layers: [\n         new OpenLayers.Layer.WMS(\n             \"Global Imagery\",\n             \"http://maps.opengeo.org/geowebcache/service/wms\",\n             {layers: \"bluemarble\"}\n         )\n     ],\n     stateId: \"map\",\n     prettyStateKeys: true // for pretty permalinks\n });\n\n // display permalink each time state is changed\n permalinkProvider.on({\n     statechanged: function(provider, name, value) {\n         alert(provider.getLink());\n     }\n });\n</code></pre>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-encodeType' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='GeoExt.state.PermalinkProvider'>GeoExt.state.PermalinkProvider</span><br/><a href='source/PermalinkProvider.html#GeoExt-state-PermalinkProvider-property-encodeType' target='_blank' class='view-source'>view source</a></div><a href='#!/api/GeoExt.state.PermalinkProvider-property-encodeType' class='name expandable'>encodeType</a><span> : Boolean</span><strong class='private signature'>private</strong></div><div class='description'><div class='short'>Specifies whether type of state values should be encoded\n and decoded. ...</div><div class='long'><p>Specifies whether type of state values should be encoded\n and decoded. Set it to false if you work with components that don't\n require encoding types, and want pretty permalinks. Defaults to true.</p>\n<p>Defaults to: <code>true</code></p></div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-getLink' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='GeoExt.state.PermalinkProvider'>GeoExt.state.PermalinkProvider</span><br/><a href='source/PermalinkProvider.html#GeoExt-state-PermalinkProvider-method-getLink' target='_blank' class='view-source'>view source</a></div><a href='#!/api/GeoExt.state.PermalinkProvider-method-getLink' class='name expandable'>getLink</a>( <span class='pre'>Object base</span> ) : String</div><div class='description'><div class='short'>Returns the permalink corresponding to the current state. ...</div><div class='long'><p>Returns the permalink corresponding to the current state.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>base</span> : Object<div class='sub-desc'><p>{String} The base URL, optional.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>The permalink.</p>\n</div></li></ul></div></div></div><div id='method-readURL' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='GeoExt.state.PermalinkProvider'>GeoExt.state.PermalinkProvider</span><br/><a href='source/PermalinkProvider.html#GeoExt-state-PermalinkProvider-method-readURL' target='_blank' class='view-source'>view source</a></div><a href='#!/api/GeoExt.state.PermalinkProvider-method-readURL' class='name expandable'>readURL</a>( <span class='pre'>Object url</span> ) : Object<strong class='private signature'>private</strong></div><div class='description'><div class='short'>Create a state object from a URL. ...</div><div class='long'><p>Create a state object from a URL.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>url</span> : Object<div class='sub-desc'><p>{String} The URL to get the state from.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>The state object.</p>\n</div></li></ul></div></div></div></div></div></div></div>","subclasses":[],"meta":{},"html_meta":{},"name":"GeoExt.state.PermalinkProvider","files":[{"href":"PermalinkProvider.html#GeoExt-state-PermalinkProvider","filename":"PermalinkProvider.js"}],"mixedInto":[],"aliases":{"widget":["gx_permalinkprovider"]},"id":"class-GeoExt.state.PermalinkProvider","superclasses":["Ext.state.Provider"]});