Ext.data.JsonP.GeoExt_data_StyleStore({"parentMixins":[],"inheritdoc":null,"extends":"Ext.data.Store","alternateClassNames":[],"requires":["GeoExt.data.VectorStyleModel","GeoExt.data.RasterStyleModel"],"tagname":"class","singleton":false,"inheritable":false,"statics":{"cfg":[],"property":[],"method":[],"event":[],"css_var":[],"css_mixin":[]},"mixins":[],"code_type":"ext_define","component":false,"uses":[],"members":{"cfg":[],"method":[],"property":[],"css_var":[],"event":[],"css_mixin":[]},"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>Ext.data.Store<div class='subclass '><strong>GeoExt.data.StyleStore</strong></div></div><h4>Requires</h4><div class='dependency'><a href='#!/api/GeoExt.data.RasterStyleModel' rel='GeoExt.data.RasterStyleModel' class='docClass'>GeoExt.data.RasterStyleModel</a></div><div class='dependency'><a href='#!/api/GeoExt.data.VectorStyleModel' rel='GeoExt.data.VectorStyleModel' class='docClass'>GeoExt.data.VectorStyleModel</a></div><h4>Files</h4><div class='dependency'><a href='source/StyleStore.html#GeoExt-data-StyleStore' target='_blank'>StyleStore.js</a></div></pre><div class='doc-contents'><p>A smart store that creates records for client-side rendered legends. If\n its store is configured with an {OpenLayers.Style2} instance as <code>data</code>,\n each record will represent a Rule of the Style, and the store will be\n configured with <code>symbolizers</code> (Array of {OpenLayers.Symbolizer}),\n <code>filter</code> ({OpenLayers.Filter}), <code>label</code> (String, the rule's title),\n <code>name</code> (String), <code>description</code> (String), <code>elseFilter</code> (Boolean),\n <code>minScaleDenominator</code> (Number) and <code>maxScaleDenominator</code> (Number)\n fields. If the store's <code>data</code> is an {OpenLayers.Symbolizer.Raster}\n instance, records will represent its ColorMap entries, and the available\n fields will only be <code>symbolizers</code> (object literal with <code>color</code> and\n <code>opacity</code> properties from the ColorMapEntry, and stroke set to false),\n <code>filter</code> (String, the ColorMapEntry's quantity) and <code>label</code> (String).</p>\n\n<p> NOTE:</p>\n\n<pre><code> Calling `commitChanges` on the store that is populated with\n this reader will fail with OpenLayers 2.11 - it requires at least\n revision\n https://github.com/openlayers/openlayers/commit/1db5ac3cbe874317968f78832901d6ef887ecca6\n from 2011-11-28 of OpenLayers.\n</code></pre>\n\n<p> Example:\n Sample code to create a store that reads from an {OpenLayers.Style2}\n object:</p>\n\n<pre><code>\n     var store = Ext.create('<a href=\"#!/api/GeoExt.data.StyleStore\" rel=\"GeoExt.data.StyleStore\" class=\"docClass\">GeoExt.data.StyleStore</a>',{\n         data: myStyle // OpenLayers.Style2 or OpenLayers.Symbolizer.Raster\n     });\n </code></pre>\n\n</div><div class='members'></div></div>","subclasses":[],"meta":{},"html_meta":{},"name":"GeoExt.data.StyleStore","files":[{"href":"StyleStore.html#GeoExt-data-StyleStore","filename":"StyleStore.js"}],"mixedInto":[],"aliases":{"store":["gx_style"]},"id":"class-GeoExt.data.StyleStore","superclasses":["Ext.data.Store"]});